This is an explaination of the workflow for Push_swap project from 42:
https://github.com/fpetras/42-subjects/blob/master/push_swap.en.pdf

To understand a bit of how the project works we need to take a look at the .h file and the structure created for this project:

typedef struct s_node
{
	int				num;
	int				index;
	int				push_cost;
	bool			above_median;
	bool			cheapest;		
	struct s_node	*next;
	struct s_node	*prev;
	struct s_node	*target_node;
}	t_node;

This structure is to create a node that will contain:
	- num: A number to sort.
	- index: Node index inside node stack
	- push_cost: The cost (in movements) to move the node to stack top (for push)
	- above_median: Register if the node is on top median or botom median inside the stack
	- cheapest: Register if this is the cheapest node in the stack (according to push cost)
	- next: conection to node next node
	- prev: conection to node previous node
	- target_node: Node target node from the other stack (to reduce movements by moving both stacks)

Program workflow:

- MAIN (main.c): int	main(int argc, char *argv[]);

The main function is needed to initiate the program and it will:

1 - Initiate 1 node for each stack (a, b) and point them to NULL (initially).
2 - Check the number of arguments recieved on program execution:
	- If the argc is 1 (no arguments, just program name) 
					OR
	  If the number of arguments is 2 and the second argument is empty (meaning we recieved just
	  one empty argument)
	  An error message is displayed in FD2(error standard output);

3 - If the number of arguments is exactly 2, we're going to replace the argv recieved by a new argv
	created by our function replicate_argv.

- REPLICATE_ARGV (init_stack.c): char	**replicate_argv(char const *s, char c);

The replicate argv function is needed for cases in wich we recieve just one argument and this argument is a string containing all numbers to sort (example: ./push_swap "23 -10 30 200 -1200")

This function uses the split function of the libft (to generate diferent strings with one separator)
The logic of this function is:

	- We recieve the string and the separator (argv[1] and ' ').
	- We create a new array of strings with its words (numbers in this case)
	- We count the number of words (numbers) and we allocate memory for an extra space (WC + 2)
	- We allocate memory for the new argv program name (new_arr[0]) and fill it with a NULL (0)
	- We fill the new_arr with all arrays from split skiping the first element (program name)
	- It returns a new argv with (argv[0] = 0, argv[1] = first number, etc).

4 - Initialize stack a:

To initialize stack a, we use the function init_stack (it recieves the stack a, argv + 1 and a flag
that is setted to true only if  argc == 2 (this is to free the arrays created on argv replications))

- INIT_STACK (init_stack.c): void	init_stack(t_node **a, char *argv[], bool free_argv);
	
This function will initialize stack a, and at the same time, check if there is any error on the arguments provided on program execution (according to project subject: the program must only manage non repeated int numbers), and also will free argv if replicated.

	- Create an int to iterate through argv and a long to save each number to sort (i = 0)
	- Iterate throug argv and check for:
		- syntax error (not numbers) with syntax_error();
		- int MAX & MIN limits (we use ft_atol to convert strings to long and then check limits)
		- repetition errors with repetition_error();
		* If no error on args recieved it appends the node to stack a with append_node();
	- Finally if the flag we recieved is true (meaning we replicated argv) we free argv with
	  free_arr();


- SYNTAX_ERROR (error_and_free.c): int	syntax_error(char *str);

This function recieves each string (number) and checks if it is actally a number by:

	- Iterate through string and check:
		- If first letter is either +/-/number (if not error is returned).

			- This will pass: 2 / 3 / -4 / +5
			- This will not: 2 / -3 / +4 / e (e is not +/-/number)

		- If first letter is either +/- and second is a number (if not error is returned).

			- This will pass: 2 / 3 / -4 / +5
			- This will not: 2 / -3 / +4 / -e (-e contains - but the next char is not a number)

		- Iterates through number & checks if avery char is a number:

			- This will pass: -12424 / +1574 / 4573
			- This will not:  -12424 / +1574 / 4573f3 (f is not a number)

- FT_ATOL (init_stack.c): long	ft_atol(char *str);

This function is just to be able to manage numbers bigger than an int, to then verify if they're inside INT LIMMITS.
*I'll not explain this function because is an standard function and you can check the original function man (man atol). It converts a string into a long integer.

The important part here is that inside init_stack() function, we create the num variable with ft_atol from each argv, and then check if num is > than INT_MAX or < than INT_MIN (if the number is not inside int limits we return an arror).

- REPETITION_ERROR (error_and_free.c): int	repetition_error(t_node *a, int nbr);

This function recieves the stack a (that since we're iterating through argv, checking for errors and if no error, appending a new node, it will beggin empty but each iteration will have a new node), and the number (casted to int, since we know now that it fits inside int limits).

	- If a == NULL (will return no error) since stack is empty
	- Iterate through stack a and if any node in stack a has its num property ecual to the number
	  recieved, it returns error, if not, moves to next node.
	- If no repeated number is found it returns no error (0);


- APPEND_NODE (utils.c): void	append_node(t_node **stack, int num);

This function recieves a stack and a number to create the new node.
It appends a new node inside a stack by:

	- Creating 2 pointers: one for the new node and one to the last node
	- If the stack is empty it returns NULL (check for errors in functon use)
	- Allocate space for a new node with structure size (protect the allocation)
	- Since it appends (add at the end) the new_node next connection will point to NULL;
	- The new_node num property will be fullfilled with the num recieved as argument
	- If the stack is empty (*stack == NULL)
		- The stack head will point to the new_node
		- The new_node previous connection will point to NULL
	- Else (stack is not empty)
		- last_node pointer will ecual to last node (find_last() function)
		- last_node next connection will point to new_node
		- new_node previous connection will point to last_node

- FIND_LAST (utils.c): t_node	*find_last(t_node *stack);

This functions iterates through a stack while a node next connection is NULL (meaning its the last
node) and it returns this last node.
Detailed explaination inside utils.c.

- ERROR_FREE (error_and_free.c): void	error_free(t_node **a, char *argv[], bool free_argv);

This function is to manage errors inside init_stack function.
It recieves a stack, argv and a flag (to free replicated argv if needed).

	- Free stack by calling free_stack() function
	- If free_argv flag recieved (meaning argc == 2, meaning we replicated argv) it frees argv
	  array generated
	- Writes "Error\n" to error standard output (FD2);
	- Exits the program with (exit(1)).

- FREE_STACK (error_and_free.c): void	free_stack(t_node	**stack);

This function frees the stack if any error is found during stack initialization and also before program end.

	- Create 2 pointers, one to itearate through array (current) and another one to save current
	  node reference (since we're freeing nodes).
	- If the stack is empty it returns nothing (nothing happens)
	- Current pointer points to stack head (*stack)
	- Iterate through stack while it has nodes
		- In each node, we save the reference to next node inside tmp pointer
		- Free current node
		- move the current pointer (iteration pointer) to temp reference (next node)
	- Point stack head to NULL

- FREE_ARR (error_and_free.c): void	free_arr(char *argv[]);

This function is to free the argv created in the case we just recieve 2 arguments.
It recieves argv array.

	- If argv or *argv is NULL (no string array or not array) it returns (nothing happens)
	- While there is arguments in argv, it frees every argument.
	- Finally we free the program name (argv -1 that equals argv[0] initializez as 0 in repl_argv())

5 - Check if the stack is sorted (check it with is_sorted() function):

	- If the stack is sorted it'll free the stack created with free_stack() function and return (0).

	- If the stack is not sorted we differenciate 3 cases:

		- Case 1: We recieve just 2 numbers to sort
		- Case 2: We recieve just 3 numbers to sort
		- Case 3: We reviece more than 3 numbers to sort.
	
	*Case 1:
	If we recieve just 2 numbers to sort and they're not sorted it means that we need to swap the
	numbers.
	We call sa() function.

	*Case 2:
	If we recieve just 3 numbers to sort, we'll call our base sorting function sort_three();

	*Case 3:
	If we recieve more than 3 numbers to sort we'll call our sort_stack() function.

- IS_SORTED (sort_base.c):bool	is_sorted(t_node *stack);

This function check if the stack that we just initialized is already sorted.
If the stack is sorted returns true, if not, false.

	- If the stack is empty we return (true) because there is nothing to sort
	- Iterate through the stack (while we have a next connection) and check if the value
	  of num in the current node is smaller than next node num value
	- If one node num value is bigger than next node num value it means the stack is not sorted
	  and we return false
	- Else if we keep on iterating by moving stack head to next  node


- STACK_LEN (utils.c): int	stack_len(t_node *stack);

This function is a basic function to itarate through stack nodes and find its length.

	- If the stack is empty it will return 0 (its length is 0).
	- Initialize len at 0
	- Iterate through stack until last node
	- Move head to next node
	- Increase len by one
	- Return len

- SORT_THREE (sort_base.c): void	sort_three(t_node **a);

This function is to sort three numbers using nodes inside a list with the structure we created
The logic of this sorting function is to finde the highes number node, place it at the end of the stack and check if first 2 numbers are already sorted (if not we swap).

	- Create a pointer to the highest node
	- If the stack is empty, we return nothing (nothing happens)
	- If the highest number is at the top (*a) we rotate (put the first at the end)
	- Else if the highest number is on the second position, we reverse rotate (put the last at 1st)
	  This means that the highest number will be at the end
	- Once we have the highest at the end, if the number on the head (*a) is bigger than the number
	  on the next node of the head ((*a)->next), we swap the first 2 numbers to sort

**CASE 3** 

If we recieve more than 3 numbers to sort, we need to manage them with the less amount of movements possible.
The logic of these case is to minimize the movements by using as much as doble movements as possible(is not the same to do a ra & rb (2 movements) than using rr (1 movement) but the output is the same, we'll rotate both stacks).

Since from now on we need to perfectly understand the possible numbers, we'll beggin by reviewing
each movement and continue with necessary functions to optimize movements.

	**MOVEMENTS**

- SWAP: This function change the 1rst and 2nd node position

	- To optimize, the logic is to create a generic function swap and then create the swap_a (sa) 
	for stack a, and swap_b (sb) for the stack b.

	- SWAP (swap.c): static void	swap(t_node **head);

	This function is created as static because it'll only be used in this file (swap.c).
		- Since to be able to perform a swap we need to have at least 2 nodes, we need to
		create a len variable to check if this is possible.
		- In adition, we'll create 2 pointers, one to first node & one to second_node

		- Len will be equal to stack_len() function.
		- If *head == NULL (we have no first node) or len == 1 (we have just one node)
		we can't perform a swap movement and we return.
		- Since we now know that we have a head, we can point the first pointer to the head
		- Also since we know that len is at least 2, we can point the 2nd pointer to 1st next

		- Now that we have our pointers and knoe we can perform swap:
			- We change the first next connection to second next connection
			(now the next node of first will be what used to be the next node of second node)
			-*This point is important to understand bidirectional linnked lists)*
			- If second node next connection is not NULL (meaning we have more than 2 nodes)
			  The previous conection of second next (the prev connection of the 3rd node) will
			  be first (if we had just 2 nodes, we don't need to manage 3rd node prev connection)
			- The following steps are just to reconect everything in its place:
				- first node prev connection will be second
				- second node next connection will be first
				- second node prev connection will be NULL (since is now on top of the stack)
				- mode the stack head to second (since is now on top of the stack)

	- SA (swap.c): void	sa(t_node **a, bool print);

	This function is to make a swap in stack a by:
		- Calling swap() function passing the stack a
		- If we recieve true as 2nd arg we'll print "sa\n" on std output (fd 1)
	

	- SB (swap.c): void	sa(t_node **b, bool print);

	This function is to make a swap in stack b by:
		- Calling swap() function passing the stack b
		- If we recieve true as 2nd arg we'll print "sb\n" on std output (fd 1)
	

	- SS (swap.c): void	sa(t_node **a, t_node **b, bool print);

	This function is to make a swap in stack in both stack a & b by:
		- Calling swap() function passing the stack a
		- Calling swap() function passing the stack b
		- *Since we wanted to reuse both sa & sb in ss function, we need to have this bool to 
		control the prints*
		- If we recieve true as 2nd arg we'll print "ss\n" on std output (fd 1)

- PUSH: This function pushes a node from one stack to another

	- PUSH (push.c): static void	push(t_node **dest, t_node **src);

	Since this function is also generic and we'll use it only in this file, the function is 
	static and the arguments are generic (dest & src represent the destination stack - the 
	stack that will recieve the new node - and the source stack - the stack that will provide
	the node to push-)

		- We'll create 3 pointers:
			- pushed_node: pointer to the node to push
			- src_first: pointer to src stack head
			- dest_first: pointer to dest stack head

		- If the src stack is empty (we cant push any node because there is no node) we will
		  return nothing.
		- If the src stack is not empty pushed_node pointer will point to src head

		*Here we'll start to realocate node and plug/unplug node prev and next connections*
		- The head of src stack (*src) will now point to src_first next connection
			- Since it's posible that we had just one node in src:
				- If the head of src (*src) is not NULL (meaning we had more than 1 node in src
				  the src head prev connection will point to NULL
				- (If we had just 1 node in src there's no need to connect next node prev con)
			- Pushed node prev connection will now point to NULL (it is on top of dest stack)
			- Since it's posible that we had no nodes in dest stack:
				- If dest_first == NULL (meaning dest stack is empty)
					- The head of dest stack (*dest) will now point to pushed node
					- Pushed node next connection will now point to NULL (its the last node)
				- Else if (meaning we already had nodes in dest stack)
					- Pushed node next connection will now be dest_first (wha used to be dest head)
					- Pushed node next node (dest 2nd node) prev connection will now be pushed node
					- Move the dest stack head (*dst) to pushed node

	- PA (push.c): void	pa(t_node **a, t_node **b, bool print);

	I'll not explain a lot because its the same for all movements.
	This function pushes 1rst a node to b.
	Pa function calls push() function with a as dest and b as source


	- PB (push.c): void	pa(t_node **b, t_node **a, bool print);

	This function pushes 1rst b node to a.
	Pa function calls push() function with b as dest and a as source

- ROTATE: This function moves the first node to the end of the stack (2nd node is now head)

	- ROTATE (rotate.c): static void	rotate(t_node **stack);

	- Since its possible that we have no node or just one node in the stack, we'll create a variable
	len to check the length of the stack
	- We'll also create 2 pointers:
		- first pointer that will point to stack head
		- last pointer that will point to stack last node
	
	- If stack is empty (first == NULL) or len is equal to 1 (just one node) we return nothing
	- last pointer will use find_last() function to find the last node.
	- We move the stack head to first next connection (2nd node is now the head)
	- First next node prev connection will now be NULL (since it is on stack head)
	- First next connction will now be NULL (since first is now at the end of the stack)
	- Last next connection will be now first (sinece last is now the penultimate node)
	- First prev connection will now be last (since first is now at the end of the stack)

	- RA (rotate.c): void	ra(t_node **a, bool print);

	This function calls rotate() function with the stack a.

	- RB (rotate.c): void	rb(t_node **b, bool print);

	This function calls rotate() function with sthe stack b.

	- RR (rotate.c): void	rr(t_node **a, t_node **b, bool print);

	This function calls rotate() function with a & b stacks.

- REVERSE ROTATE: This function moves the last node to the top of the stack

	- REVERSE_ROTATE (reverse_rotate.c): static void	reverse_rotate(t_node **stack);

	This function works exactly as rotate function but changing roles.
	We'll need 2 pointers (first, last) and an int len (with the stack len)

	- First pointer will point to stack head & len = stack length
	- If first is NULL (stack is empty) or len is 1 (just 1 node) we can't perform movement
	- Last pointer will point to stack last node
	- Move the stack head to last (last is now 1rst)
	- Last previous (penultimate) next connection is now NULL (is now at the end of stack)
	- Last next conection is first (last is 1st and first is 2nd)
	- First prev connection is last (first is now 2nd)
	- Last previous connection is now NULL (is at the end of the stack)

	- RRA (reverse_rotate.c): void	rra(t_node **a, bool print)

	This function calls reverse_rotate on stack a.

	- RRB (reverse_rotate.c): void	rrb(t_node **b, bool print)

	This function calls reverse_rotate on stack b.

	- RRR (reverse_rotate.c): void	rrr(t_node **a, t_node **b, bool print)

	This function calls reverse_rotate on both a & b stacks.


		**MOVEMENTS OPTIMIZATION**

- SORT_STACK (push_swap.c): void	sort_stack(t_node **a, t_node **b)

The logic of this function is to push numbers from stack a to stack b until you're left with 3 nodes
in stack a.
Once you have just 3 nodes on stack a, you apply the sort_three() function and then while you have
nodes in stack b, minimize movements and push all nodes from b to a for stack a to be sorted.
This explaination is a short version of what we'll se from now on.

	- Sort_stack() functin recieves both stacks (at this point a will be initialized with nodes and
	stack b will be initialized as NULL (we initialize b=NULL at main function).

	- We'll need a len_a variable to know if we have 4 or more numbers to apply the logic explained
	earlier. len_a will equal stack a length.

	(The use of len_a-- > 3 is just to validate if len_a > 3 and decrement len_a for next if):
	- If len_a-- is bigger than 3 (for example we have 4 nodes) we push a node from a to b.
	- If after this push, len_a-- is still bigger than 3 (case o 5 nodes) we push another node to b
	- While len_a-- > 3(for example 400 nodes) we'll push nodes from a to b (397 nodes in this case)
	- Once we have just 3 nodes in stack a, we sort them with sort_three() function
	*HERE COMES THE FUN PART*
	- While we have nodes in stack b we'll apply 2 functions:
		-update_nodes(*a, *b) --> UPDATE NODE INFO PHASE
		-push_b_to_a(a, b) --> BRING TO TOP AND PUSH (optimizing movements) PHASE

	**UPDATE NODE INFO PHASE**
	
	- UPDATE_NODES (set_init.c): void	update_nodes(t_node *a, t_node *b);

	This function will update all information setted on each node.

		- It sets stack a node index and relative position by calling set_index() function
		- It sets stack b node index and relative position by calling set_index() function
		- It sets a target node from stack a on each node in stack b by calling set_target_nodes()
		- It sets the cost (in movements) to push node b above its target node on stack a (set_cost)
		- It sets the cheapest node property in each node in stack b (set_cheapest() function)

	- SET_INDEX (set_init.c): set_index(t_node *stack);

	This function sets an index value and its relative position to median for each node in a stack.
	
		- We're going to need two ints, one for the median & one for the index.
		- If the stack is empty we return nothing
		- To know the median, we're dividing the stack length by two
		- Iterate through the stack to set up the index property on each node
		- If the index is smaller/equal to median we change above_median property to true
		- Else (> median) we set the above_median property to false
		- We advance to next node and increase the index
		*The need of this will be understood on next function explainations, but to have a first
		idea now: we need to know if a node is above or bellow median to decide if its better to
		apply rotate (first go to bottom) or reverse rotate (last go to top). If its above, we'll
		need less movements to bring it to the top -to push it to other stack- if we use rotate, 
		otherwise, its better to user reverse rotate*

	- SET_TARGET_NODES (set_init.c): static void	set_target_nodes(t_node *a, t_node *b);

	This function stablishes a target node inside stack a, for every node in stack b.
	The logic behind this is that we need to push every node in stack b just above the biggest
	closest number in stack a (to end up with stack a sorted).

		- Create 2 pointer, 1 to iterate stack (current_a), and another to stablish target node
		property in every node in stack b.
		- We also need an int value to have a reference of the optimal temporary target

		- Iterate through stack b:
			- In each itaration we set the target_node pointer to NULL (explaination on next lines)
			- Set the temp target value to INT_MAX (since we need to find the biggest CLOSEST value)
			- Set the current a pointer to head of stack a (to iterate through every node in a)
			- Inside the while loop (through stack a):
				- If the num property of the node in a is BIGGER than num prop in b stack
								&&
				  num prop of the node in a is SMALLER than temp target value
				  - we set the temp target value to node in a num property
				  				&&
					target node pointer to node in a
				- Else, we move to next node in a
			- If the temp target value is still INT_MAX (meaning we didn't found any number bigger
			  than node b num property, the node in b target node property will be the smallest one
			  (we find it by calling the find_smallest() function).
			- Else, node in b target node property will be target_node pointer.
			*This is why in each iteration in stack b we set target_node to NULL, because if we
			don't find a bigger-closer node we're not setting target_node*
			-Finaly, we move to next node in b.
	
		- FIND_SMALLEST (utils.c): t_node	*find_smallest(t_node *stack);

		This function is to find and return the node in a stack which has the smallest num
		property.

			- Create 2 pointers, 1 to iterate (current) 1 to the smallest node to return
			- If the stack is empty we return NULL
			- Smallest node pointer will temporary be set to current node.
			- Iterate through the stack with current node pointer
				- If the current node num property is smaller than smallest node num property
					- We set smallest node to current node
				- If not or after this, we move to the next node
			- We return the smallest node pointer.

	- SET_COST (set_init.c): static void	set_cost(t_node *a, t_node *b);

	This function sets the push cost in every node in b by adding the cost of moving node in b
	and its target node in a to the top of each stack.
	If the node is above median, the cost equals index value, else, the length - its index value.

		- Create to ints, one to set each stack length (call to stack_len() function)
		- Iterate through stack b:
			- Temporary set node b push cost property as node b index property
			- If the node b is not above median (is on the lowest half of the stack)
				- node b push cost prop equals lenght of stack b - node b index prop
			- If node b target node is not above median (also on the lowest half)
				- node b push cost prop is added (+=) length of stack a - node b TN index value
			- Else (node b target node is above median (is on the highest half)
				- node b push cost prop is added (+=) node b target node index value
			- We move to next node in stack b
	
	- SET_CHEAPEST (set_init.c): static void	set_cheapest(t_node *b);

	This function is to set cheapest node property in each node in stack b.

		- Create 2 pointers, 1 to the cheapest node, 1 to iterate through stack (current_b)
		- If the stack is empty we return nothing.
		- Temporary set both current_b and cheapest node to stack b head (b)
		- Iterate through stack b:
			- If the node in b push cost is smaller than cheapest node push cost
				Cheapest node equals node in b
			- If not or else we move to the next node in b
		-Reset current_b pointer to stack b head (b)
		- Iterate through stack b:
			- Set cheapest to false and move to next node
		- Set the cheapest node cheapest property to true
		*This function can be optimized*
	

	**BRING TO TOP AND PUSH (optimizing movements) PHASE**

	- PUSH_B_TO_A (push_swap.c): static void	push_b_to_a(t_node **a, t_node **b);

	This function is in charge of pushing a node from stack b into stack a with less movements
	posible.

	- Create a pointer to the cheapest node and control if everything is ok (exists and has TN)
	- If both cheapest node and cheapest node target node are ABOVE MEDIAN
		- Call to move_both_cheapest() function with flag 'T' (true meaning avobemed prop is true)
	- Else if both are BELLOW MEDIAN 
		- Call to move_both_cheapest() function with flag 'F' (avobe median prop is set to false)
	- Call bring_to_top() function for stack b
	- Call bring_to_top() function for stack a
	- Call to pa() function to push the node

	*This function will reduce movements to move both cheapest node in b and its target node to
	the top of the stack to push by using doble stack movements. Once one is on the top we bring
	the other to the top if needed and then push the node from b to a.

		- MOVE_BOTH_CHEAPEST (push_swap.c): static void	move_both_cheapest(t_node **a, t_node **b,
							t_node *cheapest_node, char above_median)

		This function is to move both cheapest nodes to top minimizing movements.

			- Iterate through both stacks while each stack head (*a & *b) are not equal to 
			cheapest_node (in stack b) and cheapest_node target node (in stack a)
				- If the frag recieved is 'T' (meaning both are above median)
					- Call to rr() function (rotates from top)
				- Else if flag recieved is 'F; (meaning both are bellow median)
					- Call to rrr() function (rotates from bottom)
			- At the end, we need to set the index on both stacks to be able to move one node
			or the other to the top if is not already in the top.

		- BRING_TO_TOP (push_swap.c): void	bring_to_top(t_node **stack, t_node *top_node, 
												char stack_name);

		This function checks if cheapest node or its target node are on top and make the moves if
		needed.

			- Iterate through the stack recieved while the head is not equal to the node that
			we want to have on top (either cheapest node or its target)

				- If the stack name flag is 'a'
					- If the top node is above median (CN or TN is on the top half)
						- Call ra() function
					- Else
						- Call to rra() function
				- Else if stack name flag is 'b'
					- If the top node is above median (CN or TN is on the top half)
						- Call rb() function
					- Else
						- Call to rrb() function
		
		**END OF ITARATION OF STACK B TO PUSH NODES TO A**
		Here both phases (update & push) ended.
		We just need to reset the indexes on stack a and check if the smallest number is on top 
		or not.

		- Call to set_index() function with stack a
		- Call to smallest_on_top() function with stack a.

		- SMALLEST_ON_TOP (push_swap.c): static void	smallest_on_top(t_node **a);

		This function is to check if the smallest node is on top and if not bring it to the top

			- Iterate through stack a while the head of the stack is not equal to the smallest
			node (call to find_smallest() functioon)

				- If the smallest node is above the median
					- Call to ra() function
				- Else (is bellow median)
					- Call to rra() function

